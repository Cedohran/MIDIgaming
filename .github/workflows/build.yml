name: Build and Release

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Release tag'
        required: true
        type: string

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install Visual Studio Build Tools
      uses: microsoft/setup-msbuild@v1.0.2
      
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install auto-py-to-exe pyinstaller
    
    - name: Build executable
      run: |
        pyinstaller --noconfirm --onefile --windowed --icon "misc/midi.ico" --add-data "src;src/" --name "MIDIgaming" "src/main.py"
    
    - name: Decode Certificate
      run: |
        echo "${{ secrets.SIGNING_CERT }}" | base64 --decode > misc/certificate.pfx
      shell: bash
    
    - name: Sign Executable
      run: |
        signtool sign /f misc/certificate.pfx /p "${{ secrets.CERT_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 ./dist/MIDIgaming.exe
      
    - name: Cleanup Certificate
      run: |
        rm misc/certificate.pfx
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.tag_name }}
        release_name: Release ${{ github.event.inputs.tag_name }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/MIDIgaming.exe
        asset_name: MIDIgaming.exe
        asset_content_type: application/octet-stream
